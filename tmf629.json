{
    "openapi": "3.0.0",
    "info": {
        "title": "TMF Customer Management (v4.0.0)",
        "version": "4.0",
        "description": "This is Swagger UI environment generated for the TMF Customer Management specification",
        "contact": {
            "email": "admin@quitala.eu"
        }
    },
    "paths": {
        "/customer": {
            "get": {
                "tags": [
                    "customer"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "X-Result-Count": {
                                "schema": {
                                    "type": "integer"
                                },
                                "description": "Actual number of items returned in the response body"
                            },
                            "X-Total-Count": {
                                "schema": {
                                    "type": "integer"
                                },
                                "description": "Total number of items matching criteria"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerTMF"
                                    }
                                },
                                "examples": {
                                    "test": {
                                        "value": [
                                            {
                                                "name": "some",
                                                "company": "some text",
                                                "type": "some text"
                                            },
                                            {
                                                "name": "some text",
                                                "company": "some text",
                                                "type": "some text"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "405": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Method Not allowed"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "listCustomer",
                "summary": "List or find Customer objects",
                "description": "This operation list or find Customer entities"
            },
            "post": {
                "requestBody": {
                    "description": "The Customer to be created",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Customer_Create"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "customer"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Customer"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "405": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Method Not allowed"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "createCustomer",
                "summary": "Creates a Customer",
                "description": "This operation creates a Customer entity."
            }
        },
        "/customer/{id}": {
            "get": {
                "tags": [
                    "customer"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Customer",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerTMF"
                                },
                                "examples": {
                                    "test": {
                                        "value": {
                                            "name": "some text test",
                                            "company": "some text",
                                            "type": "some text"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "405": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Method Not allowed"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "retrieveCustomer",
                "summary": "Retrieves a Customer by ID",
                "description": "This operation retrieves a Customer entity. Attribute selection is enabled for all first level attributes."
            },
            "delete": {
                "tags": [
                    "customer"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Customer",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "405": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Method Not allowed"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "deleteCustomer",
                "summary": "Deletes a Customer",
                "description": "This operation deletes a Customer entity."
            },
            "patch": {
                "requestBody": {
                    "description": "The Customer to be updated",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Customer_Update"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "customer"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Customer",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Customer"
                                }
                            }
                        },
                        "description": "Updated"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "405": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Method Not allowed"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "patchCustomer",
                "summary": "Updates partially a Customer",
                "description": "This operation updates partially a Customer entity."
            }
        },
        "/hub": {
            "post": {
                "requestBody": {
                    "description": "Data containing the callback endpoint to deliver the information",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventSubscriptionInput"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "events subscription"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventSubscription"
                                }
                            }
                        },
                        "description": "Subscribed"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "405": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Method Not allowed"
                    },
                    "409": {
                        "content": {
                            "application/json;charset=utf8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics."
            }
        },
        "/hub/{id}": {
            "delete": {
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the registered listener",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "405": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Method not allowed"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics."
            }
        },
        "/listener/customerCreateEvent": {
            "post": {
                "requestBody": {
                    "description": "The event data",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerCreateEvent"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "notification listeners (client side)"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventSubscription"
                                }
                            }
                        },
                        "description": "Notified"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "405": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Method Not allowed"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "listenToCustomerCreateEvent",
                "summary": "Client listener for entity CustomerCreateEvent",
                "description": "Example of a client listener for receiving the notification CustomerCreateEvent"
            }
        },
        "/listener/customerAttributeValueChangeEvent": {
            "post": {
                "requestBody": {
                    "description": "The event data",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerAttributeValueChangeEvent"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "notification listeners (client side)"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventSubscription"
                                }
                            }
                        },
                        "description": "Notified"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "405": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Method Not allowed"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "listenToCustomerAttributeValueChangeEvent",
                "summary": "Client listener for entity CustomerAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification CustomerAttributeValueChangeEvent"
            }
        },
        "/listener/customerStateChangeEvent": {
            "post": {
                "requestBody": {
                    "description": "The event data",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerStateChangeEvent"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "notification listeners (client side)"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventSubscription"
                                }
                            }
                        },
                        "description": "Notified"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "405": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Method Not allowed"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "listenToCustomerStateChangeEvent",
                "summary": "Client listener for entity CustomerStateChangeEvent",
                "description": "Example of a client listener for receiving the notification CustomerStateChangeEvent"
            }
        },
        "/listener/customerDeleteEvent": {
            "post": {
                "requestBody": {
                    "description": "The event data",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerDeleteEvent"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "notification listeners (client side)"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventSubscription"
                                }
                            }
                        },
                        "description": "Notified"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "405": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Method Not allowed"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "listenToCustomerDeleteEvent",
                "summary": "Client listener for entity CustomerDeleteEvent",
                "description": "Example of a client listener for receiving the notification CustomerDeleteEvent"
            }
        }
    },
    "components": {
        "schemas": {
            "AccountRef": {
                "description": "Account reference. A account may be a party account or a financial account.",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the account",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the account",
                        "type": "string"
                    },
                    "description": {
                        "description": "Detailed description of the account",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the account",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "AgreementRef": {
                "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the agreement",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "Any": {},
            "Characteristic": {
                "description": "Describes a given characteristic of an object or entity through a name/value pair.",
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the characteristic",
                        "type": "string"
                    },
                    "valueType": {
                        "description": "Data type of the value of the characteristic",
                        "type": "string"
                    },
                    "value": {
                        "$ref": "#/components/schemas/Any"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "ContactMedium": {
                "description": "Indicates the contact medium that could be used to contact the party.",
                "required": [
                    "mediumType",
                    "characteristic"
                ],
                "type": "object",
                "properties": {
                    "mediumType": {
                        "description": "Type of the contact medium, such as: email address, telephone number, postal address",
                        "type": "string"
                    },
                    "preferred": {
                        "description": "If true, indicates that is the preferred contact medium",
                        "type": "boolean"
                    },
                    "characteristic": {
                        "$ref": "#/components/schemas/MediumCharacteristic"
                    },
                    "validFor": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "CreditProfile": {
                "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
                "required": [
                    "creditProfileDate",
                    "validFor"
                ],
                "type": "object",
                "properties": {
                    "creditProfileDate": {
                        "format": "date-time",
                        "description": "The date the profile was established",
                        "type": "string"
                    },
                    "creditRiskRating": {
                        "description": "This is an integer whose value is used to rate the risk",
                        "type": "integer"
                    },
                    "creditScore": {
                        "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history",
                        "type": "integer"
                    },
                    "validFor": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "Customer": {
                "required": [
                    "engagedParty"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier for Customers",
                        "type": "string"
                    },
                    "href": {
                        "description": "Url used to reference the customer.",
                        "type": "string"
                    },
                    "name": {
                        "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers.",
                        "type": "string"
                    },
                    "status": {
                        "description": "Used to track the lifecycle status of the customer.",
                        "type": "string"
                    },
                    "statusReason": {
                        "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.",
                        "type": "string"
                    },
                    "account": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountRef"
                        }
                    },
                    "agreement": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgreementRef"
                        }
                    },
                    "characteristic": {
                        "description": "Describes the characteristic of a customer.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Characteristic"
                        }
                    },
                    "contactMedium": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContactMedium"
                        }
                    },
                    "creditProfile": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreditProfile"
                        }
                    },
                    "engagedParty": {
                        "$ref": "#/components/schemas/RelatedParty"
                    },
                    "paymentMethod": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentMethodRef"
                        }
                    },
                    "relatedParty": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedParty"
                        }
                    },
                    "validFor": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "Customer_Create": {
                "description": "\nSkipped properties: id,href",
                "required": [
                    "engagedParty",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers.",
                        "type": "string"
                    },
                    "status": {
                        "description": "Used to track the lifecycle status of the customer.",
                        "type": "string"
                    },
                    "statusReason": {
                        "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.",
                        "type": "string"
                    },
                    "account": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountRef"
                        }
                    },
                    "agreement": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgreementRef"
                        }
                    },
                    "characteristic": {
                        "description": "Describes the characteristic of a customer.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Characteristic"
                        }
                    },
                    "contactMedium": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContactMedium"
                        }
                    },
                    "creditProfile": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreditProfile"
                        }
                    },
                    "engagedParty": {
                        "$ref": "#/components/schemas/RelatedParty"
                    },
                    "paymentMethod": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentMethodRef"
                        }
                    },
                    "relatedParty": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedParty"
                        }
                    },
                    "validFor": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "Customer_Update": {
                "description": "\nSkipped properties: id,href",
                "required": [
                    "engagedParty"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers.",
                        "type": "string"
                    },
                    "status": {
                        "description": "Used to track the lifecycle status of the customer.",
                        "type": "string"
                    },
                    "statusReason": {
                        "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.",
                        "type": "string"
                    },
                    "account": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountRef"
                        }
                    },
                    "agreement": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgreementRef"
                        }
                    },
                    "characteristic": {
                        "description": "Describes the characteristic of a customer.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Characteristic"
                        }
                    },
                    "contactMedium": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContactMedium"
                        }
                    },
                    "creditProfile": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreditProfile"
                        }
                    },
                    "engagedParty": {
                        "$ref": "#/components/schemas/RelatedParty"
                    },
                    "paymentMethod": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentMethodRef"
                        }
                    },
                    "relatedParty": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedParty"
                        }
                    },
                    "validFor": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "EntityRef": {
                "description": "Entity reference schema to be use for all entityRef class.",
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the related entity.",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "MediumCharacteristic": {
                "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
                "type": "object",
                "properties": {
                    "city": {
                        "description": "The city",
                        "type": "string"
                    },
                    "contactType": {
                        "description": "The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation…",
                        "type": "string"
                    },
                    "country": {
                        "description": "The country",
                        "type": "string"
                    },
                    "emailAddress": {
                        "description": "Full email address in standard format",
                        "type": "string"
                    },
                    "faxNumber": {
                        "description": "The fax number of the contact",
                        "type": "string"
                    },
                    "phoneNumber": {
                        "description": "The primary phone number of the contact",
                        "type": "string"
                    },
                    "postCode": {
                        "description": "Postcode",
                        "type": "string"
                    },
                    "socialNetworkId": {
                        "description": "Identifier as a member of a social network",
                        "type": "string"
                    },
                    "stateOrProvince": {
                        "description": "State or province",
                        "type": "string"
                    },
                    "street1": {
                        "description": "Describes the street",
                        "type": "string"
                    },
                    "street2": {
                        "description": "Complementary street description",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "PaymentMethodRef": {
                "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the payment mean",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the payment mean",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the payment mean",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "RelatedParty": {
                "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
                "required": [
                    "@referredType",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the related entity.",
                        "type": "string"
                    },
                    "role": {
                        "description": "Role played by the related party",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "TimePeriod": {
                "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
                "type": "object",
                "properties": {
                    "endDateTime": {
                        "format": "date-time",
                        "description": "End of the time period, using IETC-RFC-3339 format",
                        "type": "string"
                    },
                    "startDateTime": {
                        "format": "date-time",
                        "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end",
                        "type": "string"
                    }
                }
            },
            "EventSubscription": {
                "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
                "required": [
                    "id",
                    "callback"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Id of the listener",
                        "type": "string"
                    },
                    "callback": {
                        "description": "The callback being registered.",
                        "type": "string"
                    },
                    "query": {
                        "description": "additional data to be passed",
                        "type": "string"
                    }
                }
            },
            "EventSubscriptionInput": {
                "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
                "required": [
                    "callback"
                ],
                "type": "object",
                "properties": {
                    "callback": {
                        "description": "The callback being registered.",
                        "type": "string"
                    },
                    "query": {
                        "description": "additional data to be passed",
                        "type": "string"
                    }
                }
            },
            "CustomerCreateEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the resource involved in the event",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the resource involved in the event",
                        "type": "string"
                    },
                    "eventId": {
                        "description": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "description": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "description": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "description": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "description": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "description": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "description": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "description": "The time the event occured.",
                        "type": "string"
                    },
                    "event": {
                        "$ref": "#/components/schemas/CustomerCreateEventPayload"
                    }
                }
            },
            "CustomerCreateEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    }
                }
            },
            "CustomerAttributeValueChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "description": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "description": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "description": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "description": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "description": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "description": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "description": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "description": "The time the event occured.",
                        "type": "string"
                    },
                    "fieldPath": {
                        "description": "The path identifying the object field concerned by this notification.",
                        "type": "string"
                    },
                    "event": {
                        "$ref": "#/components/schemas/CustomerAttributeValueChangeEventPayload"
                    }
                }
            },
            "CustomerAttributeValueChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    }
                }
            },
            "CustomerStateChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the resource involved in the event",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the resource involved in the event",
                        "type": "string"
                    },
                    "eventId": {
                        "description": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "description": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "description": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "description": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "description": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "description": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "description": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "description": "The time the event occured.",
                        "type": "string"
                    },
                    "event": {
                        "$ref": "#/components/schemas/CustomerStateChangeEventPayload"
                    }
                }
            },
            "CustomerStateChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    }
                }
            },
            "CustomerDeleteEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the resource involved in the event",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the resource involved in the event",
                        "type": "string"
                    },
                    "eventId": {
                        "description": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "description": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "description": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "description": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "description": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "description": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "description": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "description": "The time the event occured.",
                        "type": "string"
                    },
                    "event": {
                        "$ref": "#/components/schemas/CustomerDeleteEventPayload"
                    }
                }
            },
            "CustomerDeleteEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    }
                }
            },
            "Error": {
                "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
                "required": [
                    "code",
                    "reason"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Application relevant detail, defined in the API or a common list.",
                        "type": "string"
                    },
                    "reason": {
                        "description": "Explanation of the reason for the error which can be shown to a client user.",
                        "type": "string"
                    },
                    "message": {
                        "description": "More details and corrective actions related to the error which can be shown to a client user.",
                        "type": "string"
                    },
                    "status": {
                        "description": "HTTP Error code extension",
                        "type": "string"
                    },
                    "referenceError": {
                        "format": "uri",
                        "description": "URI of documentation describing the error.",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class.",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "description": "When sub-classing, this defines the sub-class entity name.",
                        "type": "string"
                    }
                }
            },
            "CustomerTMF": {
                "title": "Root Type for CustomerTMF",
                "description": "CustomerTMF",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "company": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "example": {
                    "name": "sergio",
                    "company": "redhat",
                    "type": "internal"
                }
            }
        },
        "securitySchemes": {
            "api-key": {
                "type": "apiKey",
                "description": "api-key",
                "name": "api-key",
                "in": "query"
            }
        }
    },
    "security": [
        {
            "api-key": []
        }
    ],
    "tags": [
        {
            "name": "customer"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ]
}
